@page "/updateproduct"
@page "/updateproduct/{id:int}"

@using KärraGamesCorner.Data.Models
@using KärraGamesCorner.Data
@using KärraGamesCorner.Interfaces
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using System.Collections.Concurrent

@inject NavigationManager NavigationManager
@inject IUnitOfWork _unitOfWork 


@if (Id == null)
{
    <PageTitle>Create a new Product</PageTitle>
    <h3>Create a new Product</h3>
}
else
{
    <PageTitle>Edit @_product.Name</PageTitle>
    <h3>Edit @_product.Name</h3>
}





<EditForm Model="_product" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="_product.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="_product.Description" class="form-control"></InputText>
    </div>
    <div>
        <label for="producer">Producer</label>
        <InputText id="producer" @bind-Value="_product.Producer" class="form-control"></InputText>
    </div>
    <div>
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="_product.Price" class="form-control"></InputNumber>
    </div>
     <div>
        <label for="physical">Fysisk</label>
        <InputCheckbox id="physical" @bind-Value="_product.IsPhysical"></InputCheckbox>
    </div>

    @if(_product.IsPhysical is false)
    {
          <div>
        <label>Genre</label><br />
        <InputSelect @bind-Value="_product.GenreId" class="form-select">
            @foreach (var genre in _genres)
            {
                <option value="@genre.Id">@genre.Name</option>
            }
        </InputSelect>
    </div>
    }
  
   
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
</EditForm>


@code {

    [Parameter]
    public int? Id { get; set; }


    private KärraGamesCorner.Data.Models.Product _product = new Product{}; 



    string btnText = string.Empty;


    private ConcurrentBag<Genre> _genres;

    protected override async Task OnInitializedAsync()
    {
        _genres = new ConcurrentBag<Genre>(await _unitOfWork.Genres.GetAsync());
        btnText = Id == null ? "Create Product" : "Update product";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
             _product = (await _unitOfWork.Products.GetAsync(filter: (x => x.Id == Id))).FirstOrDefault();
            
        }

    }
    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await _unitOfWork.Products.CreateAsync(_product);
            
            await _unitOfWork.CommitAsync();
            
        }
        else
        {
             await _unitOfWork.Products.UpdateAsync(_product);
             await _unitOfWork.CommitAsync();
             NavigationManager.NavigateTo("/Admin");
        }
     
      
    }
}
