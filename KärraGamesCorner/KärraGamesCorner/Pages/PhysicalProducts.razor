@page "/PhysicalProducts"

@using KärraGamesCorner.Interfaces
@using System.Security.Claims
@using System.Collections.Concurrent

@inject IUnitOfWork _unitOfWork
@inject IHttpContextAccessor _accessor


   <div class="search-form">
    <form class="nosubmit">
        <input class="nosubmit" type="search" placeholder="Sök efter spelnamn..."
               @bind="Filter"
               @bind:event="oninput">
    </form>
</div>

    <div class="card-deck-wrapper">
        @foreach (var product in _products)
        {
            if (!IsVisible(product))
                continue;
            <div class="card" style="width: 18rem;">
                <img src="@product.ImageUrl" runat="server" class="card-img-top" alt="...">
                <div class="card-body">
                    <h5 class="card-title">@product.Name</h5>
                    <p class="card-text">@product.Description</p>
                </div>
                <div class="c-info">
                    <p class="price">@product.Price kr</p>
                    <a @onclick="() => AddProduct(product.Id)" class="btn btn-decoration">add</a>
                </div>
            </div>
        }
    </div>
<hr />

@code {

     public string Filter { get; set; }
     private ConcurrentBag<Product> _products;

    protected override async Task OnInitializedAsync()
    {
        _products = new ConcurrentBag<Product>(await _unitOfWork.Products.GetAsync(filter:(x => x.IsPhysical == true)));
    }

    private async Task AddProduct(int id)
    {
        if (_accessor.HttpContext.User.Identity.IsAuthenticated)
        {
            var claims = _accessor.HttpContext.User.Claims;
            foreach (var claim in claims)
            {
                if (claim.Type == ClaimTypes.NameIdentifier)
                {
                    var user = (await _unitOfWork.Users.GetAsync(filter: (x => x.Id == claim.Value), include: "CartProducts")).FirstOrDefault();
                    var prod = (await _unitOfWork.Products.GetAsync(filter: (x => x.Id == id))).FirstOrDefault();

                    if (user is null || prod is null)
                    {
                        return;
                    }
                    foreach (var userCartProduct in user.CartProducts)
                    {
                        if (userCartProduct.ProductId == prod.Id)
                        {
                            userCartProduct.Amount++;
                            await _unitOfWork.CartProducts.UpdateAsync(userCartProduct);
                             await _unitOfWork.CommitAsync();
                            return;
                        }
                    }
                    await _unitOfWork.CartProducts.CreateAsync(new CartProduct
                    {
                        User = user,
                        Product = prod,
                        ApplicationUserId = user.Id,
                        ProductId = prod.Id,
                        Amount = 1
                    });
                    await _unitOfWork.CommitAsync();
                    return;
                }
            }
        }
    }

    
    public bool IsVisible(Product product)
        {
        if (string.IsNullOrEmpty(Filter))
            return true;
 
        if (product.Name.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;
 
        if (product.Id.ToString().StartsWith(Filter) || product.Id.ToString().StartsWith(Filter))
            return true;
 
            return false;
        }
       
}
