
@inject AuthenticationStateProvider _provider
@inject IUnitOfWork _unitOfWork 
@inject IHttpContextAccessor _accessor
@using System.Collections.Concurrent
@using KärraGamesCorner.Interfaces
@using System.Security.Claims



<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">KärraGamesCorner</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>
<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Digitala Produkter
            </NavLink>
        </div>
         <div class="nav-item px-3">
            <NavLink class="nav-link" href="PhysicalProducts" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Fysiska Produkter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" @onclick="()=>expandSubMenuAccount= !expandSubMenuAccount" Match="NavLinkMatch.All">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Konto
            </NavLink>
            
        @if (expandSubMenuAccount)
        {
      <AuthorizeView>
                <Authorized>
                    <form method="post" action="Identity/Account/LogOut">
                        <button type="submit" class="nav-link btn btn-link">Logga ut</button>
                    </form>
                    @if(context.User.IsInRole("Admin")){
                             <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Admin">
                       <span class="oi oi-home" aria-hidden="true"></span> Admin Page
                    </NavLink>
                      </div>
                         <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Order">
                       <span class="oi oi-home" aria-hidden="true"></span> Order Page
                    </NavLink>
                      </div>
                        }

                  

                    </Authorized>
                <NotAuthorized>
                    <a href="Identity/Account/Register">Registrera</a>
                    <a href="Identity/Account/Login">Logga in</a>
                </NotAuthorized>
        </AuthorizeView>  
        }
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" @onclick="()=>expandSubMenuContact =!expandSubMenuContact" Match="NavLinkMatch.All">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Kontakt/Om Oss
            </NavLink>
            
        @if (expandSubMenuContact)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="About us">
                    <span class="oi oi-file" aria-hidden="true"></span> Om Oss
                </NavLink>
            </div>
             
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Contact">
                    <span class="oi oi-file" aria-hidden="true"></span> Kontakta Oss
                </NavLink>
            </div>
        }
        </div>
        <div class="nav-item px-3">
                <NavLink class="nav-link" href="CustomerCart"  Match="NavLinkMatch.All">
                 <span class="oi oi-cart" aria-hidden="true"></span>Kundvagn
                </NavLink>
        </div>
            <div id="cartIcon" class="cart-icon">
    <div class="px-3 cart-icon">
        <NavLink href="CustomerCart">
            <i class="bi bi-cart">
                
                <span class="cart-icon-number">@counter
                    
                    
                </span>
            </i>
        </NavLink>
    </div>
</div>
    </nav>

    


   
</div>

@code {
    public int counter;
    private bool collapseNavMenu = true;

    private ConcurrentBag<CartProduct> _cartProducts = new();


    private bool expandSubMenuAccount;
    private bool expandSubMenuContact;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;


    private async Task GetCartAsync()
    {

        if (_accessor.HttpContext.User.Identity.IsAuthenticated)
        {
            var claims = _accessor.HttpContext.User.Claims;
            foreach (var claim in claims)
            {
                if (claim.Type == ClaimTypes.NameIdentifier)
                {
                    _cartProducts = new ConcurrentBag<CartProduct>(await _unitOfWork.CartProducts.GetAsync
                        (filter:(x => x.ApplicationUserId == claim.Value), include:"Product"));
                    UpdateQuantity();
                    return;
                }
            }

        }
    }

    protected override async Task OnInitializedAsync()
    {
         await GetCartAsync();

        _unitOfWork.OnChange += async () =>
        {
            await GetCartAsync();

        };

    }

    private void UpdateQuantity()
    {
        counter = 0;
        foreach (var item in _cartProducts)
        {
            counter += item.Amount;
        }

        StateHasChanged();

    }
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

}
