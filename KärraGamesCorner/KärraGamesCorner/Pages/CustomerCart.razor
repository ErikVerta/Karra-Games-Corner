@page "/customercart"

@using KärraGamesCorner.Interfaces
@using System.Collections.Concurrent
@using System.Security.Claims
@using KärraGamesCorner.Data.Models

@inject IUnitOfWork _unitOfWork
@inject IHttpContextAccessor _accessor
@inject NavigationManager NavigationManager


<body>
<table>
     

     <tr>
         <th>Titel</th>
         <th>Pris</th>
         <th>Antal</th>
         <th>TotalPris</th>
         <th>Action</th>
     </tr>
     @foreach (var cartProduct in _cartProducts)
     {
         <tr>
             <td>@cartProduct.Product.Name</td>
             <td>@cartProduct.Product.Price</td>
             <td>
                 <button class="btn-danger" @onclick="()=> SubtractFromAmountAsync(cartProduct)" >-</button>
                 @cartProduct.Amount
                 <button class="btn-success" @onclick="()=> AddToAmountAsync(cartProduct)" >+</button>
             </td>
             <td>@RowPrice(cartProduct) kr</td>
             <td>
                 <button class="btn btn-danger" @onclick="() => DeleteRowAsync(cartProduct)">Delete</button>
             </td>
         </tr>
     }
 </table>
<div>
    <h3>Cart Price: @GetTotalCartPrice()</h3>
	<button class="btn btn-success" @onclick="GoToCheckout" disabled=@IsDisabled> Till checkout</button>
</div>


<footer class="footer border-top pl-3 text-muted">
        <div class="container">
        &copy; 2022 - KärraGamesCorner
        </div>
    </footer>

</body>




@code {
    //När den är true så kan man inte klicka på knappen
    private bool IsDisabled { get; set; } = true;



    private ConcurrentBag<CartProduct> _cartProducts = new();

    protected override async Task OnInitializedAsync()
    {
        if (_accessor.HttpContext.User.Identity.IsAuthenticated)
        {
            var claims = _accessor.HttpContext.User.Claims;
            foreach (var claim in claims)
            {
                if (claim.Type == ClaimTypes.NameIdentifier)
                {

                    _cartProducts = new ConcurrentBag<CartProduct>(await _unitOfWork.CartProducts.GetAsync(filter:(x => x.ApplicationUserId == claim.Value), include:"Product"));
	                if (_cartProducts.Count > 0)
	                { // Man kan klicka på knappen endast om det finns något i carten
		                IsDisabled = false;
	                }

                    return;
                }
            }
        }
    }
    //Gör en metod som räknar ut totalpris på raden
    public decimal RowPrice(CartProduct product)
    {
        return product.Amount * product.Product.Price;
    }

    public decimal GetTotalCartPrice()
    {
        CartProduct[] products = _cartProducts.ToArray();
        decimal total = 0m;

        for(int i = 0; i < products.Length; i++)
        {
            total += RowPrice(products[i]);
        }

        return total;
    }

    private void GoToCheckout()
	{
		NavigationManager.NavigateTo("/Checkout");
	}

    
    //Gör en metod som ökar antalet - koppla till en knapp
    public async Task AddToAmountAsync(CartProduct product)
    {
        product.Amount++;
        await _unitOfWork.CommitAsync();
        
    }
    //Gör en metod som minskar antalet - koppla till en knapp
    public async Task SubtractFromAmountAsync(CartProduct product)
    {
        if (product.Amount > 0)
        {
            product.Amount--;
            await _unitOfWork.CommitAsync();
        }
    }
    //Gör en metod som räknar ut totalpris på raden
    public async Task DeleteRowAsync(CartProduct product)
    {
        await _unitOfWork.CartProducts.DeleteAsync(product);
        await _unitOfWork.CommitAsync();
        if (_cartProducts.Count == 1)
        {
            IsDisabled = true;
        }
        OnInitializedAsync();
    }

}
