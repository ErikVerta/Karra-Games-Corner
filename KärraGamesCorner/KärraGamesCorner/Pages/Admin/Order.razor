@page "/Order"

@using KärraGamesCorner.Data.Models
@using KärraGamesCorner.Data
@using KärraGamesCorner.Interfaces
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using System.Collections.Concurrent

@inject NavigationManager NavigationManager
@inject IUnitOfWork _unitOfWork 

<h3> Orderhistorik</h3>

 <link rel="stylesheet" href="/Identity/css/site.css" />
 
 <div class="table-responsive">
 <table class="table">

     
              <tr>
                <th>Användar Id</th>
                <th>Order Id </th>
                <th>Order Datum </th>
                <th>Kostnad</th>
                
              </tr>

              @foreach (var order in _orders)
             {
               <tr>
                <td>@order.User.Id</td>
                <td>@order.Id</td>
                <td>@order.OrderOfDate</td>
                <td>@order.TotalPrice kr</td>              
               </tr>
             }
 </table>

</div>

<h3> Ej Slutförda Ordrar</h3>
 <div class="table-responsive">
 <table class="table">

     
              <tr>
                <th>Användar Id</th>
                <th>Email </th>
                <th>Kostnad</th>
                <th>Action</th>            
              </tr>

              @foreach (var user in _users)
             {
            decimal totalPrice = 0;
            @foreach (var cartProd in user.CartProducts)
              {
                  @if (cartProd.OrderId != null)
                {

                    continue;

                }

                totalPrice += cartProd.Product.Price * cartProd.Amount;
              }
            @if(totalPrice <= 0)
            {
                continue;
            }

              <tr>
              <td>@user.Id</td>
              <td>@user.Email</td>
              <td>@totalPrice kr</td>
              <td>
                  <button class="btn btn-decoration">Info</button>
              </td>
              </tr>
             }

 </table>

</div>



@code {

    private ConcurrentBag<KärraGamesCorner.Data.Models.ApplicationUser> _users;

    private ConcurrentBag<KärraGamesCorner.Data.Models.Order> _orders;

    protected override async Task OnInitializedAsync()
    {
        _orders = new ConcurrentBag<KärraGamesCorner.Data.Models.Order>(await _unitOfWork.Orders.GetAsync(include:"User,Products"));

        _users = new ConcurrentBag<ApplicationUser>(await _unitOfWork.Users.GetAsync(include:"CartProducts"));
    }


}
